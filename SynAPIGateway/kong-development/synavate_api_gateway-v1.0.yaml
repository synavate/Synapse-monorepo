
openapi: 3.0.0
info:
  title: Synavate API Gateway
  version: 1.0.0
  description: API gateway for user management, data visualization, processing, and knowledge graph generation services.

servers:
  - url: 'http://{name}:{PORT}'
    variables:
      name:
        default: 'internal-dns-name'
      PORT:
        enum:
          - '7070'
          - '7071'
          - '7072'
          - '7073'
          - '7074'
          - '7075'
          - '7076'
          - '7077'
          - '7078'
          - '7079'
          - '7080'
          - '7081'
          - '7082'
          - '7083'
          - '7084'
          - '7085'
          - '7086'
          - '7087'
          - '7088'
          - '7089'

paths:
  /user-auth/{id}:
    get:
      summary: Authenticate a user based on their ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User authenticated successfully.

  /user-signup:
    post:
      summary: Sign up a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User created successfully.

  /user/{id}:
    get:
      summary: Retrieve user details by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details retrieved successfully.

  /cortex/node-similarity/:
    post:
      summary: Analyze node similarity in the knowledge graph.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                node_data:
                  type: string
      responses:
        '200':
          description: Node similarity analysis completed.

  /update-similar-nodes/{query}:
    post:
      summary: Update similar nodes in the knowledge graph based on a query.
      parameters:
        - name: query
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Similar nodes updated successfully.

  /qdrant/init-connection:
    get:
      summary: Initialize connection to QDrant.
      responses:
        '200':
          description: Connection to QDrant initialized successfully.

  /qdrant/upsert/:
    post:
      summary: Upsert data into QDrant.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
      responses:
        '200':
          description: Data upserted successfully in QDrant.

  /mongo/get-data:
    get:
      summary: Retrieve data from MongoDB.
      responses:
        '200':
          description: Data retrieved successfully from MongoDB.

  /redis/cache-data:
    post:
      summary: Cache data in Redis.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
      responses:
        '200':
          description: Data cached successfully in Redis.

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

security:
  - ApiKeyAuth: []
