"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vercel";
exports.ids = ["vendor-chunks/@vercel"];
exports.modules = {

/***/ "(rsc)/./node_modules/@vercel/kv/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/@vercel/kv/dist/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VercelKV: () => (/* binding */ VercelKV),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   \"default\": () => (/* binding */ src_default),\n/* harmony export */   kv: () => (/* binding */ kv)\n/* harmony export */ });\n/* harmony import */ var _upstash_redis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @upstash/redis */ \"(rsc)/./node_modules/@upstash/redis/nodejs.js\");\n// src/index.ts\n\nvar _kv = null;\nprocess.env.UPSTASH_DISABLE_TELEMETRY = \"1\";\nvar VercelKV = class extends _upstash_redis__WEBPACK_IMPORTED_MODULE_0__.Redis {\n    // This API is based on https://github.com/redis/node-redis#scan-iterator which is not supported in @upstash/redis\n    /**\n   * Same as `scan` but returns an AsyncIterator to allow iteration via `for await`.\n   */ async *scanIterator(options) {\n        let cursor = 0;\n        let keys;\n        do {\n            [cursor, keys] = await this.scan(cursor, options);\n            for (const key of keys){\n                yield key;\n            }\n        }while (cursor !== 0);\n    }\n    /**\n   * Same as `hscan` but returns an AsyncIterator to allow iteration via `for await`.\n   */ async *hscanIterator(key, options) {\n        let cursor = 0;\n        let items;\n        do {\n            [cursor, items] = await this.hscan(key, cursor, options);\n            for (const item of items){\n                yield item;\n            }\n        }while (cursor !== 0);\n    }\n    /**\n   * Same as `sscan` but returns an AsyncIterator to allow iteration via `for await`.\n   */ async *sscanIterator(key, options) {\n        let cursor = 0;\n        let items;\n        do {\n            [cursor, items] = await this.sscan(key, cursor, options);\n            for (const item of items){\n                yield item;\n            }\n        }while (cursor !== 0);\n    }\n    /**\n   * Same as `zscan` but returns an AsyncIterator to allow iteration via `for await`.\n   */ async *zscanIterator(key, options) {\n        let cursor = 0;\n        let items;\n        do {\n            [cursor, items] = await this.zscan(key, cursor, options);\n            for (const item of items){\n                yield item;\n            }\n        }while (cursor !== 0);\n    }\n};\nfunction createClient(config) {\n    return new VercelKV({\n        // The Next.js team recommends no value or `default` for fetch requests's `cache` option\n        // upstash/redis defaults to `no-store`, so we enforce `default`\n        cache: \"default\",\n        ...config\n    });\n}\nvar src_default = new Proxy({}, {\n    get (target, prop, receiver) {\n        if (prop === \"then\" || prop === \"parse\") {\n            return Reflect.get(target, prop, receiver);\n        }\n        if (!_kv) {\n            if (!process.env.KV_REST_API_URL || !process.env.KV_REST_API_TOKEN) {\n                throw new Error(\"@vercel/kv: Missing required environment variables KV_REST_API_URL and KV_REST_API_TOKEN\");\n            }\n            console.warn('\\x1b[33m\"The default export has been moved to a named export and it will be removed in version 1, change to import { kv }\\x1b[0m\"');\n            _kv = createClient({\n                url: process.env.KV_REST_API_URL,\n                token: process.env.KV_REST_API_TOKEN\n            });\n        }\n        return Reflect.get(_kv, prop);\n    }\n});\nvar kv = new Proxy({}, {\n    get (target, prop) {\n        if (!_kv) {\n            if (!process.env.KV_REST_API_URL || !process.env.KV_REST_API_TOKEN) {\n                throw new Error(\"@vercel/kv: Missing required environment variables KV_REST_API_URL and KV_REST_API_TOKEN\");\n            }\n            _kv = createClient({\n                url: process.env.KV_REST_API_URL,\n                token: process.env.KV_REST_API_TOKEN\n            });\n        }\n        return Reflect.get(_kv, prop);\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHZlcmNlbC9rdi9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsZUFBZTtBQUN3QjtBQUN2QyxJQUFJQyxNQUFNO0FBQ1ZDLFFBQVFDLEdBQUcsQ0FBQ0MseUJBQXlCLEdBQUc7QUFDeEMsSUFBSUMsV0FBVyxjQUFjTCxpREFBS0E7SUFDaEMsa0hBQWtIO0lBQ2xIOztHQUVDLEdBQ0QsT0FBT00sYUFBYUMsT0FBTyxFQUFFO1FBQzNCLElBQUlDLFNBQVM7UUFDYixJQUFJQztRQUNKLEdBQUc7WUFDRCxDQUFDRCxRQUFRQyxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUNDLElBQUksQ0FBQ0YsUUFBUUQ7WUFDekMsS0FBSyxNQUFNSSxPQUFPRixLQUFNO2dCQUN0QixNQUFNRTtZQUNSO1FBQ0YsUUFBU0gsV0FBVyxHQUFHO0lBQ3pCO0lBQ0E7O0dBRUMsR0FDRCxPQUFPSSxjQUFjRCxHQUFHLEVBQUVKLE9BQU8sRUFBRTtRQUNqQyxJQUFJQyxTQUFTO1FBQ2IsSUFBSUs7UUFDSixHQUFHO1lBQ0QsQ0FBQ0wsUUFBUUssTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDQyxLQUFLLENBQUNILEtBQUtILFFBQVFEO1lBQ2hELEtBQUssTUFBTVEsUUFBUUYsTUFBTztnQkFDeEIsTUFBTUU7WUFDUjtRQUNGLFFBQVNQLFdBQVcsR0FBRztJQUN6QjtJQUNBOztHQUVDLEdBQ0QsT0FBT1EsY0FBY0wsR0FBRyxFQUFFSixPQUFPLEVBQUU7UUFDakMsSUFBSUMsU0FBUztRQUNiLElBQUlLO1FBQ0osR0FBRztZQUNELENBQUNMLFFBQVFLLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQ0ksS0FBSyxDQUFDTixLQUFLSCxRQUFRRDtZQUNoRCxLQUFLLE1BQU1RLFFBQVFGLE1BQU87Z0JBQ3hCLE1BQU1FO1lBQ1I7UUFDRixRQUFTUCxXQUFXLEdBQUc7SUFDekI7SUFDQTs7R0FFQyxHQUNELE9BQU9VLGNBQWNQLEdBQUcsRUFBRUosT0FBTyxFQUFFO1FBQ2pDLElBQUlDLFNBQVM7UUFDYixJQUFJSztRQUNKLEdBQUc7WUFDRCxDQUFDTCxRQUFRSyxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUNNLEtBQUssQ0FBQ1IsS0FBS0gsUUFBUUQ7WUFDaEQsS0FBSyxNQUFNUSxRQUFRRixNQUFPO2dCQUN4QixNQUFNRTtZQUNSO1FBQ0YsUUFBU1AsV0FBVyxHQUFHO0lBQ3pCO0FBQ0Y7QUFDQSxTQUFTWSxhQUFhQyxNQUFNO0lBQzFCLE9BQU8sSUFBSWhCLFNBQVM7UUFDbEIsd0ZBQXdGO1FBQ3hGLGdFQUFnRTtRQUNoRWlCLE9BQU87UUFDUCxHQUFHRCxNQUFNO0lBQ1g7QUFDRjtBQUNBLElBQUlFLGNBQWMsSUFBSUMsTUFDcEIsQ0FBQyxHQUNEO0lBQ0VDLEtBQUlDLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxRQUFRO1FBQ3hCLElBQUlELFNBQVMsVUFBVUEsU0FBUyxTQUFTO1lBQ3ZDLE9BQU9FLFFBQVFKLEdBQUcsQ0FBQ0MsUUFBUUMsTUFBTUM7UUFDbkM7UUFDQSxJQUFJLENBQUMzQixLQUFLO1lBQ1IsSUFBSSxDQUFDQyxRQUFRQyxHQUFHLENBQUMyQixlQUFlLElBQUksQ0FBQzVCLFFBQVFDLEdBQUcsQ0FBQzRCLGlCQUFpQixFQUFFO2dCQUNsRSxNQUFNLElBQUlDLE1BQ1I7WUFFSjtZQUNBQyxRQUFRQyxJQUFJLENBQ1Y7WUFFRmpDLE1BQU1tQixhQUFhO2dCQUNqQmUsS0FBS2pDLFFBQVFDLEdBQUcsQ0FBQzJCLGVBQWU7Z0JBQ2hDTSxPQUFPbEMsUUFBUUMsR0FBRyxDQUFDNEIsaUJBQWlCO1lBQ3RDO1FBQ0Y7UUFDQSxPQUFPRixRQUFRSixHQUFHLENBQUN4QixLQUFLMEI7SUFDMUI7QUFDRjtBQUVGLElBQUlVLEtBQUssSUFBSWIsTUFDWCxDQUFDLEdBQ0Q7SUFDRUMsS0FBSUMsTUFBTSxFQUFFQyxJQUFJO1FBQ2QsSUFBSSxDQUFDMUIsS0FBSztZQUNSLElBQUksQ0FBQ0MsUUFBUUMsR0FBRyxDQUFDMkIsZUFBZSxJQUFJLENBQUM1QixRQUFRQyxHQUFHLENBQUM0QixpQkFBaUIsRUFBRTtnQkFDbEUsTUFBTSxJQUFJQyxNQUNSO1lBRUo7WUFDQS9CLE1BQU1tQixhQUFhO2dCQUNqQmUsS0FBS2pDLFFBQVFDLEdBQUcsQ0FBQzJCLGVBQWU7Z0JBQ2hDTSxPQUFPbEMsUUFBUUMsR0FBRyxDQUFDNEIsaUJBQWlCO1lBQ3RDO1FBQ0Y7UUFDQSxPQUFPRixRQUFRSixHQUFHLENBQUN4QixLQUFLMEI7SUFDMUI7QUFDRjtBQU9BLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3luYXBzZS11c2Vyc2VydmljZS8uL25vZGVfbW9kdWxlcy9AdmVyY2VsL2t2L2Rpc3QvaW5kZXguanM/OWQ3NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvaW5kZXgudHNcbmltcG9ydCB7IFJlZGlzIH0gZnJvbSBcIkB1cHN0YXNoL3JlZGlzXCI7XG52YXIgX2t2ID0gbnVsbDtcbnByb2Nlc3MuZW52LlVQU1RBU0hfRElTQUJMRV9URUxFTUVUUlkgPSBcIjFcIjtcbnZhciBWZXJjZWxLViA9IGNsYXNzIGV4dGVuZHMgUmVkaXMge1xuICAvLyBUaGlzIEFQSSBpcyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vcmVkaXMvbm9kZS1yZWRpcyNzY2FuLWl0ZXJhdG9yIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gQHVwc3Rhc2gvcmVkaXNcbiAgLyoqXG4gICAqIFNhbWUgYXMgYHNjYW5gIGJ1dCByZXR1cm5zIGFuIEFzeW5jSXRlcmF0b3IgdG8gYWxsb3cgaXRlcmF0aW9uIHZpYSBgZm9yIGF3YWl0YC5cbiAgICovXG4gIGFzeW5jICpzY2FuSXRlcmF0b3Iob3B0aW9ucykge1xuICAgIGxldCBjdXJzb3IgPSAwO1xuICAgIGxldCBrZXlzO1xuICAgIGRvIHtcbiAgICAgIFtjdXJzb3IsIGtleXNdID0gYXdhaXQgdGhpcy5zY2FuKGN1cnNvciwgb3B0aW9ucyk7XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIHlpZWxkIGtleTtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChjdXJzb3IgIT09IDApO1xuICB9XG4gIC8qKlxuICAgKiBTYW1lIGFzIGBoc2NhbmAgYnV0IHJldHVybnMgYW4gQXN5bmNJdGVyYXRvciB0byBhbGxvdyBpdGVyYXRpb24gdmlhIGBmb3IgYXdhaXRgLlxuICAgKi9cbiAgYXN5bmMgKmhzY2FuSXRlcmF0b3Ioa2V5LCBvcHRpb25zKSB7XG4gICAgbGV0IGN1cnNvciA9IDA7XG4gICAgbGV0IGl0ZW1zO1xuICAgIGRvIHtcbiAgICAgIFtjdXJzb3IsIGl0ZW1zXSA9IGF3YWl0IHRoaXMuaHNjYW4oa2V5LCBjdXJzb3IsIG9wdGlvbnMpO1xuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfSB3aGlsZSAoY3Vyc29yICE9PSAwKTtcbiAgfVxuICAvKipcbiAgICogU2FtZSBhcyBgc3NjYW5gIGJ1dCByZXR1cm5zIGFuIEFzeW5jSXRlcmF0b3IgdG8gYWxsb3cgaXRlcmF0aW9uIHZpYSBgZm9yIGF3YWl0YC5cbiAgICovXG4gIGFzeW5jICpzc2Nhbkl0ZXJhdG9yKGtleSwgb3B0aW9ucykge1xuICAgIGxldCBjdXJzb3IgPSAwO1xuICAgIGxldCBpdGVtcztcbiAgICBkbyB7XG4gICAgICBbY3Vyc29yLCBpdGVtc10gPSBhd2FpdCB0aGlzLnNzY2FuKGtleSwgY3Vyc29yLCBvcHRpb25zKTtcbiAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKGN1cnNvciAhPT0gMCk7XG4gIH1cbiAgLyoqXG4gICAqIFNhbWUgYXMgYHpzY2FuYCBidXQgcmV0dXJucyBhbiBBc3luY0l0ZXJhdG9yIHRvIGFsbG93IGl0ZXJhdGlvbiB2aWEgYGZvciBhd2FpdGAuXG4gICAqL1xuICBhc3luYyAqenNjYW5JdGVyYXRvcihrZXksIG9wdGlvbnMpIHtcbiAgICBsZXQgY3Vyc29yID0gMDtcbiAgICBsZXQgaXRlbXM7XG4gICAgZG8ge1xuICAgICAgW2N1cnNvciwgaXRlbXNdID0gYXdhaXQgdGhpcy56c2NhbihrZXksIGN1cnNvciwgb3B0aW9ucyk7XG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgIH1cbiAgICB9IHdoaWxlIChjdXJzb3IgIT09IDApO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlQ2xpZW50KGNvbmZpZykge1xuICByZXR1cm4gbmV3IFZlcmNlbEtWKHtcbiAgICAvLyBUaGUgTmV4dC5qcyB0ZWFtIHJlY29tbWVuZHMgbm8gdmFsdWUgb3IgYGRlZmF1bHRgIGZvciBmZXRjaCByZXF1ZXN0cydzIGBjYWNoZWAgb3B0aW9uXG4gICAgLy8gdXBzdGFzaC9yZWRpcyBkZWZhdWx0cyB0byBgbm8tc3RvcmVgLCBzbyB3ZSBlbmZvcmNlIGBkZWZhdWx0YFxuICAgIGNhY2hlOiBcImRlZmF1bHRcIixcbiAgICAuLi5jb25maWdcbiAgfSk7XG59XG52YXIgc3JjX2RlZmF1bHQgPSBuZXcgUHJveHkoXG4gIHt9LFxuICB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgIGlmIChwcm9wID09PSBcInRoZW5cIiB8fCBwcm9wID09PSBcInBhcnNlXCIpIHtcbiAgICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpO1xuICAgICAgfVxuICAgICAgaWYgKCFfa3YpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzLmVudi5LVl9SRVNUX0FQSV9VUkwgfHwgIXByb2Nlc3MuZW52LktWX1JFU1RfQVBJX1RPS0VOKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgXCJAdmVyY2VsL2t2OiBNaXNzaW5nIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlcyBLVl9SRVNUX0FQSV9VUkwgYW5kIEtWX1JFU1RfQVBJX1RPS0VOXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnXFx4MUJbMzNtXCJUaGUgZGVmYXVsdCBleHBvcnQgaGFzIGJlZW4gbW92ZWQgdG8gYSBuYW1lZCBleHBvcnQgYW5kIGl0IHdpbGwgYmUgcmVtb3ZlZCBpbiB2ZXJzaW9uIDEsIGNoYW5nZSB0byBpbXBvcnQgeyBrdiB9XFx4MUJbMG1cIidcbiAgICAgICAgKTtcbiAgICAgICAgX2t2ID0gY3JlYXRlQ2xpZW50KHtcbiAgICAgICAgICB1cmw6IHByb2Nlc3MuZW52LktWX1JFU1RfQVBJX1VSTCxcbiAgICAgICAgICB0b2tlbjogcHJvY2Vzcy5lbnYuS1ZfUkVTVF9BUElfVE9LRU5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVmbGVjdC5nZXQoX2t2LCBwcm9wKTtcbiAgICB9XG4gIH1cbik7XG52YXIga3YgPSBuZXcgUHJveHkoXG4gIHt9LFxuICB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgaWYgKCFfa3YpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzLmVudi5LVl9SRVNUX0FQSV9VUkwgfHwgIXByb2Nlc3MuZW52LktWX1JFU1RfQVBJX1RPS0VOKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgXCJAdmVyY2VsL2t2OiBNaXNzaW5nIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlcyBLVl9SRVNUX0FQSV9VUkwgYW5kIEtWX1JFU1RfQVBJX1RPS0VOXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIF9rdiA9IGNyZWF0ZUNsaWVudCh7XG4gICAgICAgICAgdXJsOiBwcm9jZXNzLmVudi5LVl9SRVNUX0FQSV9VUkwsXG4gICAgICAgICAgdG9rZW46IHByb2Nlc3MuZW52LktWX1JFU1RfQVBJX1RPS0VOXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFJlZmxlY3QuZ2V0KF9rdiwgcHJvcCk7XG4gICAgfVxuICB9XG4pO1xuZXhwb3J0IHtcbiAgVmVyY2VsS1YsXG4gIGNyZWF0ZUNsaWVudCxcbiAgc3JjX2RlZmF1bHQgYXMgZGVmYXVsdCxcbiAga3Zcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOlsiUmVkaXMiLCJfa3YiLCJwcm9jZXNzIiwiZW52IiwiVVBTVEFTSF9ESVNBQkxFX1RFTEVNRVRSWSIsIlZlcmNlbEtWIiwic2Nhbkl0ZXJhdG9yIiwib3B0aW9ucyIsImN1cnNvciIsImtleXMiLCJzY2FuIiwia2V5IiwiaHNjYW5JdGVyYXRvciIsIml0ZW1zIiwiaHNjYW4iLCJpdGVtIiwic3NjYW5JdGVyYXRvciIsInNzY2FuIiwienNjYW5JdGVyYXRvciIsInpzY2FuIiwiY3JlYXRlQ2xpZW50IiwiY29uZmlnIiwiY2FjaGUiLCJzcmNfZGVmYXVsdCIsIlByb3h5IiwiZ2V0IiwidGFyZ2V0IiwicHJvcCIsInJlY2VpdmVyIiwiUmVmbGVjdCIsIktWX1JFU1RfQVBJX1VSTCIsIktWX1JFU1RfQVBJX1RPS0VOIiwiRXJyb3IiLCJjb25zb2xlIiwid2FybiIsInVybCIsInRva2VuIiwia3YiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@vercel/kv/dist/index.js\n");

/***/ })

};
;